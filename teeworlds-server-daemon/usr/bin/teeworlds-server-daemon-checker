#!/bin/bash

# Get configuration
DEFAULTCONFIG='/etc/default/teeworlds-server-daemon'
if [ -f "$DEFAULTCONFIG" ]; then
	. "$DEFAULTCONFIG"
else
	echo "$DEFAULTCONFIG not found"
	exit 1
fi

# Add default storages
echo "add_path $TMP" > "$SERVERS/storage.cfg"
echo "add_path $SERVERS/data" >> "$SERVERS/storage.cfg"

# Check if the machine has restarted
currentboottime=$(who -b | awk '{print $3" "$4}')
if [ -f $RUNNING ]
then
	runningboottime=$(cat $RUNNING | grep 'boottime' | cut -d ' ' -f '2-')
	if [ "$currentboottime" != "$runningboottime" ]
	then
		echo "boottime $currentboottime" > $RUNNING
	fi
else
	echo "boottime $currentboottime" > $RUNNING
fi

# Check if all config are in running informations
for config in $(ls $SETTINGS | grep '.cfg')
do
	exist=$(cat $RUNNING | grep "$config" | wc -l)
	if [ $exist = '0' ]
	then
		echo "$config stopped $DATE $HOUR never started" >> $RUNNING
	fi
done

# Useful files
PIDFILE="$TMP/checker.pid"
LOCKFILE="$TMP/checker.lock"

# Command
case "$1" in

	# One time
	once)
		# Wait for unlocking
		while [ -f $LOCKFILE ]
		do
			sleep 1
		done

		# Lock !
		touch $LOCKFILE

		# Get configs
		configs=$(cat $RUNNING | grep -v 'boottime' | cut -d ' ' -f 1)
		
		# Loop 
		for config in $configs
		do
			# Get info
			info=$(cat $RUNNING | grep $config)

			# Get the current status
			stat=$(echo $info | cut -d ' ' -f 2)

			# Checking cases
			case $stat in

				# The server is started
				started)

					# Get the PID
					pid=$(echo $info | cut -d ' ' -f 5)

					# Check if the server is really started
					started=$(ps -p $pid -o 'cmd' --no-headers | grep $config | wc -l)
					if [ $started -eq 0 ]
					then
						# The server is not running
						sed -i "/$config/d" $RUNNING
						echo "$config stopped $DATE $HOUR application exit" >> $RUNNING
					fi

				;;

				# The server is stopped
				stopped)

					# Nothing to do

				;;
			
			esac
		done		

		# Unlock !
		rm $LOCKFILE
	;;

	# Stop
	kill)
		# Check for running
		if [ -f $PIDFILE ]
		then
			# Get the PID
			pid=`cat $PIDFILE`

			# Kill the process
			kill $pid

			# Remove file
			rm $PIDFILE
		fi
	;;

	# Infinite
	*)
		# Check for running
		if [ ! -f $PIDFILE ]
		then  
			# Log the PID
			echo $$ > $PIDFILE

			# Loop
			while [ true ]
			do
				# Sleep
				sleep $CHECKINTERVAL

				# Run the check
				$CHECKER once
			done
		fi
	;;

# End of file
esac

