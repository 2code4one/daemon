#!/bin/bash  

# Get lsb functions
if [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
else
	echo '/lib/lsb/init-functions not found'
	exit 1
fi

# Get configuration
if [ -f /etc/default/teeworlds-server-daemon ]; then
	. /etc/default/teeworlds-server-daemon
else
	echo '/etc/default/teeworlds-server-daemon not found'
	exit 1
fi

# Check if the machine has restarted
currentboottime=$(who -b | awk '{print $3" "$4}')
if [ -f $RUNNING ]
then
	runningboottime=$(cat $RUNNING | grep 'boottime' | cut -d ' ' -f '2-')
	if [ "$currentboottime" != "$runningboottime" ]
	then
		echo "boottime $currentboottime" > $RUNNING
	fi
else
	echo "boottime $currentboottime" > $RUNNING
fi

# Get the date 
date=$(date +%Y/%m/%d)
hour=$(date +%H:%M)

# Check if all config are in running informations
for config in $(ls $SETTINGS | grep '.cfg')
do
	exist=$(cat $RUNNING | grep "$config" | wc -l)
	if [ $exist = '0' ]
	then
		echo "$config stopped $date $hour never started" >> $RUNNING
	fi
done

# Get action
action="$1"

# Get configs
configs=( $(ls $SETTINGS | grep '.cfg') )
if [ $# -gt 1 ]; then
	configs=( $(echo "$*" | cut -d ' ' -f '2-') )
	for i in $(seq 0 $(expr ${#configs[*]} - 1)); do
		configs[$i]="${configs[$i]}.cfg"
	done
fi

# Commands
case "$action" in

	# Start servers
	start)
		log_begin_msg 'Starting Teeworlds server(s)...'

		# Count started server
		started=0

		# Loop on config files
		for config in ${configs[*]}
		do
			# Get absolute path
			log="$LOGS/$config.log"
			settings="$SETTINGS/$config"

			# Check for existance
			if [ ! -f "$settings" ] 
			then
				log_failure_msg "$config does not exist"
				continue
			fi

			# Check if already started 
			already=$(cat $RUNNING | grep "$config started" | wc -l)
			if [ $already = '1' ]
			then
				log_failure_msg "$config is already running"
				continue
			fi

			# Copy settings
			cp --remove-destination $settings $TMP
			tmpsettings="$TMP/$config"

			# Remove unwanted settings
			sed -i '/#!/d' $tmpsettings
			sed -i '/logfile/d' $tmpsettings

			# Get the server binary
			srv='vanilla'
			specialsrv=$(cat $settings | grep '#!' | wc -l)
			if [ $specialsrv = '1' ]
			then
				srv=$(cat $settings | grep '#!' | cut -d '!' -f 2)
			fi
			server="$SERVERS/$srv"

			# Erase previous running information
			sed -i "/$config/d" $RUNNING

			# Check if server binary exists
			if [ -f "$server" ]
			then
				# Start the server
				nohup $server -f $config > $log 2>&1 < /dev/null &

				# Get the PID and log it
				pid=$!
				echo "$config started $date $hour $pid" >> $RUNNING

				# Count started server
				started=$(expr $started + 1)

				# Server started
				log_success_msg "$config ($srv) started"
			else
				# No binary found 
				echo "$config stopped $date $hour binary '$srv' not found" >> $RUNNING
				log_failure_msg "$config: binary '$srv' not found"
			fi
		done

		# Success
		log_success_msg "$started/${#configs[*]} server(s) started"
		log_end_msg $?
	;;

	# Stop servers
	stop)
		log_begin_msg 'Stopping Teeworlds server(s)...'

		# Count stopped servers
		stopped=0

		# Loop on config files
		for config in ${configs[*]}
		do
			# Check for existance
			existance=$(cat $RUNNING | grep $config | wc -l)
			if [ $existance = '0' ]
			then
				log_failure_msg "$config does not exist"
				continue
			fi	

			# Get info
			info=$(cat $RUNNING | grep $config)

			# If server is started
			started=$(echo $info | cut -d ' ' -f 2)
			if [ $started = 'started' ]
			then
				# Kill the server
				pid=$(echo $info | cut -d ' ' -f 5)
				kill $pid 

				# Replace info
				sed -i "/$config/d" $RUNNING
				echo "$config stopped $date $hour stopped by user" >> $RUNNING

				# Count
				stopped=$(expr $stopped + 1)

				# Print
				log_success_msg "$config stopped"
			else
				# Already stopped
				log_failure_msg "$config is already stopped"
			fi
		done

		# Success
		log_success_msg "$stopped/${#configs[*]} server(s) stopped"
		log_end_msg $?
	;;

	# Restart servers
	restart)
		# Remove .cfg
		for i in $(seq 0 $(expr ${#configs[*]} - 1)); do
			configs[$i]=$(echo "${configs[$i]%.*}")
		done

		# Stop and start servers
		$LAUNCHER stop ${configs[*]}
		$LAUNCHER start ${configs[*]}
	;;

	# Servers status
	status)
		log_begin_msg 'Server(s) status...'

		# Count servers
		started=0

		# Loop on config files
		for config in ${configs[*]}
		do
			# Check for existance
			existance=$(cat $RUNNING | grep $config | wc -l)
			if [ $existance = '0' ]
			then
				log_failure_msg "$config does not exist"
				continue
			fi	

			# Get info
			info=$(cat $RUNNING | grep $config)

			# Extract infos
			config=$(echo $info | cut -d ' ' -f 1)
			isstarted=$(echo $info | cut -d ' ' -f 2)
			localdate=$(echo $info | cut -d ' ' -f 3)
			localhour=$(echo $info | cut -d ' ' -f 4)
			detail=$(echo $info | cut -d ' ' -f '5-')

			# If server is started
			if [ $isstarted = 'started' ]
			then
				# Count started servers
				started=$(expr $started + 1)

				# Print status
				log_success_msg "$config is running since $localdate at $localhour"
			else
				# Print status
				log_failure_msg "$config is stopped since $localdate at $localhour ($detail)"
			fi
		done 

		# Print count
		log_success_msg "$started/${#configs[*]} server(s) running"
		log_end_msg $?
	;;

	# Servers configs
	config)
		log_begin_msg 'Server(s) configurations...'
		output="$(log_success_msg 'CONFIG SERVER GAMETYPE PORT SLOTS REGISTERED')"

		# Loop on config files
		for config in ${configs[*]}
		do
			# Get absolute path
			settings="$SETTINGS/$config"
			
			# Check for existance
			if [ ! -f "$settings" ] 
			then
				log_failure_msg "$config does not exist"
				continue
			fi

			# Extract infos
			port=$(cat $settings | grep sv_port | cut -d ' ' -f 2)
			register=$(cat $settings | grep sv_register | cut -d ' ' -f 2)
			max_clients=$(cat $settings | grep sv_max_clients | cut -d ' ' -f 2)
			gametype=$(cat $settings | grep sv_gametype | cut -d ' ' -f 2)

			# Correct for default value
			if [ -z $port ]; then
				port='8303'
			fi
			if [ -z $max_clients ]; then
				max_clients='8'
			fi
			if [ -z $gametype ]; then
				gametype='dm'
			fi

			# Pretty output
			isregister='yes'
			if [ "$register" = '0' ]; then
			   isregister='no'
			fi	   
			
			# Get the server binary
			srv='vanilla'
			specialsrv=$(cat $settings | grep '#!' | wc -l)
			if [ $specialsrv = '1' ]; then
				srv=$(cat $settings | grep '#!' | cut -d '!' -f 2)
			fi
			
			# Print infos
			output="$output\n$(log_success_msg "$config $srv $gametype $port $max_clients $isregister")"
		done

		# Print
		if [ "$(echo -e "$output" | wc -l)" != '1' ]; then
			echo -e "$output" | column -t
		fi

		# End
		log_end_msg $?
	;;

	# Servers loads
	loads)
		log_begin_msg 'Server(s) loads...'
		output="$(log_success_msg 'CONFIG CPU-TIME-USED MEMORY-USE SLOTS-USE CONNECTIONS')"

		# Loop on config files
		for config in ${configs[*]}
		do
			# Check for existance
			existance=$(cat $RUNNING | grep $config | wc -l)
			if [ $existance = '0' ]
			then
				log_failure_msg "$config does not exist"
				continue
			fi	

			# Get info
			info=$(cat $RUNNING | grep $config)

			# If server is started
			started=$(echo $info | cut -d ' ' -f 2)
			if [ $started = 'started' ]
			then
				# Get load info
				pid=$(echo $info | cut -d ' ' -f 5)
				load=$(ps -p $pid -o 'pmem,cputime,etimes' --no-headers | awk '{$1=$1}{ print }')

				# Extract infos
				pmem=$(echo $load | cut -d ' ' -f 1)
				cputime=$(echo $load | cut -d ' ' -f 2)
				etimes=$(echo $load | cut -d ' ' -f 3)
				
				# Compute infos
				cpuhour=$(echo $cputime | cut -d ':' -f 1)
				cpumin=$(echo $cputime | cut -d ':' -f 2)
				cpusec=$(echo $cputime | cut -d ':' -f 3)
				cpusec=$(expr $cpuhour \* 3600 + $cpumin \* 60 + $cpusec)
				activity=$(echo "$cpusec / $etimes * 100" | bc -l | awk '{printf "%.2f", $1}')
				memory=$(echo "$pmem" | awk '{printf "%.2f", $1}')

				# Get connections
				log="$LOGS/$config.log"
				connection=$(cat "$log" | grep '\[server\]: player has entered the game' | wc -l)
				deconnection=$(cat "$log" | grep '\[server\]: client dropped' | wc -l)
				slots=$(expr $connection - $deconnection)
				
				# Get max clients
				settings="$SETTINGS/$config"
				max_clients=$(cat $settings | grep sv_max_clients | cut -d ' ' -f 2)
				if [ -z $max_clients ]; then
					max_clients='8'
				fi
				
				# Print load
				output="$output\n$(log_success_msg "$config $activity% $memory% $slots/$max_clients $connection")"
			else
				# Print
				output="$output\n$(log_failure_msg "$config - - - -")"
			fi
		done
		
		# Print
		if [ "$(echo -e "$output" | wc -l)" != '1' ]; then
			echo -e "$output" | column -t
		fi

		# End
		log_end_msg $?
	;;

	# Help
	*)
		log_success_msg 'USAGE :' 
		log_success_msg "    $LAUNCHER ACTION [CONFIG]..."
		log_success_msg 'CONFIG:'
		log_success_msg "    Config file(s) (without the .cfg) in $SETTINGS/"
		log_success_msg '    If omitted, apply the action to all config files'
		log_success_msg 'ACTION:'
		log_success_msg '    start   - start server(s)'
		log_success_msg '    stop    - stop server(s)'
		log_success_msg '    restart - stop and start server(s)'
		log_success_msg '    status  - get server(s) status'
		log_success_msg '    config  - get server(s) configuration'
		log_success_msg '    loads   - get server(s) loads'
		log_success_msg '    help    - print this help'
	;;

# End of file
esac

