#!/bin/bash  

# Get configuration
if [ -f /etc/default/teeworlds-server-daemon ]; then
	. /etc/default/teeworlds-server-daemon
else
	echo '/etc/default/teeworlds-server-daemon not found'
	exit 1
fi

# Check running informations
currentboottime=$(who -b | awk '{print $3" "$4}')
if [ -f $RUNNING ]
then
	runningboottime=$(cat $RUNNING | grep 'boottime' | cut -d ' ' -f '2-')
	if [ "$currentboottime" != "$runningboottime" ]
	then
		echo "boottime $currentboottime" > $RUNNING
	fi
else
	echo "boottime $currentboottime" > $RUNNING
fi

# Get lsb functions
if [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
else
	echo '/lib/lsb/init-functions not found'
	exit 1
fi

# Get the date 
date=$(date +%Y/%m/%d)
hour=$(date +%H:%M)

# Commands
case "$1" in

	# Start servers
	start)
		log_begin_msg 'Starting Teeworlds server(s)...'

		# Count started server
		started=0
		total=0

		# Loop on config files
		for config in $(ls $SETTINGS | grep .cfg)
		do
			# Count all configs
			total=$(expr $total + 1)	

			# Check if already started 
			already=$(cat $RUNNING | grep "$config started" | wc -l)
			if [ $already = '1' ]
			then
				log_failure_msg "$config is already running"
				continue
			fi

			# Get absolute path
			log="$LOGS/$config.log"
			settings="$SETTINGS/$config"

			# Copy settings
			cp --remove-destination $settings $TMP
			tmpsettings="$TMP/$config"

			# Remove unwanted settings
			sed -i '/#!/d' $tmpsettings
			sed -i '/logfile/d' $tmpsettings

			# Get the server binary
			srv='vanilla'
			specialsrv=$(cat $settings | grep '#!' | wc -l)
			if [ $specialsrv = '1' ]
			then
				srv=$(cat $settings | grep '#!' | cut -d '!' -f 2)
			fi
			server="$SERVERS/$srv"

			# Erase previous running information
			sed -i "/$config/d" $RUNNING

			# Check if server binary exists
			if [ -f $server ]
			then
				# Start the server
				nohup $server -f $config > $log 2>&1 < /dev/null &

				# Get the PID and log it
				pid=$!
				echo "$config started $date $hour $pid" >> $RUNNING

				# Count started server
				started=$(expr $started + 1)

				# Server started
				log_success_msg "$config ($srv) started"
			else
				# No binary found 
				echo "$config stopped $date $hour binary '$srv' not found" >> $RUNNING
				log_failure_msg "$config: binary '$srv' not found"
			fi
		done

		# Success
		log_success_msg "$started/$total server(s) started"
		log_end_msg $?
	;;

	# Stop servers
	stop)
		log_begin_msg 'Stopping Teeworlds server(s)...'

		# Count stopped servers
		count=0

		# Loop on infos
		while read info
		do
			# If server is started
			started=$(echo $info | cut -d ' ' -f 2)
			if [ $started = 'started' ]
			then
				# Kill the server
				pid=$(echo $info | cut -d ' ' -f 5)
				kill $pid 

				# Replace info
				config=$(echo $info | cut -d ' ' -f 1)
				sed -i "/$config/d" $RUNNING
				echo "$config stopped $date $hour stopped by user" >> $RUNNING

				# Count
				count=$(expr $count + 1)
			fi
		done < $RUNNING

		# Success
		log_success_msg "$count server(s) stopped"
		log_end_msg $?
	;;

	# Restart servers
	restart)
		# Stop and start servers
		$LAUNCHER stop
		$LAUNCHER start
	;;

	# Servers status
	status)
		# Count servers
		total=0
		started=0

		# Loop on infos
		while read info
		do
			# Count servers
			total=$(expr $total + 1)

			# Extract infos
			config=$(echo $info | cut -d ' ' -f 1)
			isstarted=$(echo $info | cut -d ' ' -f 2)
			localdate=$(echo $info | cut -d ' ' -f 3)
			localhour=$(echo $info | cut -d ' ' -f 4)
			detail=$(echo $info | cut -d ' ' -f '5-')

			# If server is started
			if [ $isstarted = 'started' ]
			then
				# Count started servers
				started=$(expr $started + 1)

				# Print status
				log_success_msg "$config is running since $localdate at $localhour"
			else
				# Print status
				log_failure_msg "$config is stopped since $localdate at $localhour ($detail)"
			fi
		done < $RUNNING

		# Print count
		log_success_msg "$started/$total server(s) started"
	;;

	# Servers configs
	config)
		log_begin_msg 'Server(s) configurations...'

		# Loop on config files
		for config in $(ls $SETTINGS | grep .cfg)
		do
			# Get absolute path
			settings="$SETTINGS/$config"

			# Extract infos
			port=$(cat $settings | grep sv_port | cut -d ' ' -f 2)
			register=$(cat $settings | grep sv_register | cut -d ' ' -f 2)
			max_clients=$(cat $settings | grep sv_max_clients | cut -d ' ' -f 2)
			gametype=$(cat $settings | grep sv_gametype | cut -d ' ' -f 2)

			# Correct for default value
			if [ -z $port ]; then
				port='<default>'
			fi
			if [ -z $max_clients ]; then
				max_clients='<default>'
			fi
			if [ -z $gametype ]; then
				gametype='<default>'
			fi

			# Pretty output
			isregister='is'
			if [ "$register" = '0' ]; then
			   isregister='is not'
			fi	   
			
			# Get the server binary
			srv='vanilla'
			specialsrv=$(cat $settings | grep '#!' | wc -l)
			if [ $specialsrv = '1' ]; then
				srv=$(cat $settings | grep '#!' | cut -d '!' -f 2)
			fi
			
			# Print infos
			log_success_msg "$config ($srv, $gametype) $isregister registered, use the port $port and has $max_clients slot(s)"
		done

		# End
		log_end_msg $?
	;;

	# Servers loads
	loads)
	log_begin_msg 'Server(s) loads...'

		# Loop on info
		while read info
		do
			# If server is started
			started=$(echo $info | cut -d ' ' -f 2)
			if [ $started = 'started' ]
			then
				# Get load info
				pid=$(echo $info | cut -d ' ' -f 5)
				load=$(ps -p $pid -o 'pmem,cputime,etimes' --no-headers | awk '{$1=$1}{ print }')

				# Extract infos
				config=$(echo $info | cut -d ' ' -f 1)
				pmem=$(echo $load | cut -d ' ' -f 1)
				cputime=$(echo $load | cut -d ' ' -f 2)
				etimes=$(echo $load | cut -d ' ' -f 3)
				
				# Compute infos
				cpuhour=$(echo $cputime | cut -d ':' -f 1)
				cpumin=$(echo $cputime | cut -d ':' -f 2)
				cpusec=$(echo $cputime | cut -d ':' -f 3)
				cpusec=$(expr $cpuhour \* 3600 + $cpumin \* 60 + $cpusec)
				activity=$(echo "$cpusec / $etimes * 100" | bc -l)
				memory=$(echo "$pmem * 100" | bc -l)

				# Print load
				log_success_msg "$config used $activity% of the processor time and is using $memory% of memory"
			fi
		done < $RUNNING

		# End
		log_end_msg $?
	;;

	# Help
	*)
		log_success_msg "Usage: $LAUNCHER {action}"
		log_success_msg 'Actions:'
		log_success_msg '    start   - start server(s)'
		log_success_msg '    stop    - stop server(s)'
		log_success_msg '    restart - stop and start server(s)'
		log_success_msg '    status  - get server(s) status'
		log_success_msg '    config  - get server(s) configuration'
		log_success_msg '    loads   - get server(s) loads'
		log_success_msg '    help    - print this help'
	;;

# End of file
esac

